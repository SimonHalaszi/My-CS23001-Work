//
// File:        logentry.hpp
//
// Version:     1.0
// Date:
// Author:
//
// Description: Class definition for a log entry.
//
//
//
 
#ifndef CS_LOGENTRY_H_
#define CS_LOGENTRY_H_

#include "string.hpp"
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <vector>

//
class Date {
    public:
        Date() : day("\0"), month("\0"), year("\0") {};
        Date(String Day, String Month, String Year) : day(Day), month(Month), year(Year) {};
        String getDay() const { return day; };
        String getMonth() const { return month; };
        String getYear() const { return year; };
    private:
        String  day, month, year;
};

//
class Time {
    public:
        Time() : hour("\0"), minute("\0"), second("\0") {};
        Time(String Hour, String Minute, String Second) : hour(Hour), minute(Minute), second(Second) {};
        String getHour() const { return hour; };
        String getMinute() const { return minute; };
        String getSecond() const { return second; };
    private:
        String  hour, minute, second;
};


// A single log entry
class LogEntry {
    public:
        LogEntry() : host("\0"), date(), time(), request("\0"), status("\0"), number_of_bytes(0) {};
        LogEntry(const String&);
        friend  std::ostream& operator<<(std::ostream&, const LogEntry&);
        String getHost() const { return host; };
        int getBytes() const { return number_of_bytes; };

    private:
        String  host;
        Date    date;
        Time    time;
        String  request;
        String  status;
        int     number_of_bytes;
};


//
// Free functions
//

std::vector<LogEntry> parse       (std::istream&);
void output_all  (std::ostream&, const std::vector<LogEntry>&);
void by_host     (std::ostream&, const std::vector<LogEntry>&);
int byte_count  (const std::vector<LogEntry>&);

#endif
