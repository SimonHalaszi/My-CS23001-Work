//
//
// File:        logentry.cpp  
//       
// Version:     1.0
// Date:        
// Author:      
//
// Description: Class implementation for a log entry.
//
//
 
#include "string.hpp"
#include "logentry.hpp"

// REQUIRES:
// ENSURES:
LogEntry::LogEntry(const String& line) {
    std::vector<String> data = line.split(' ');
    
    if (data.size() == 10) {
        host = data[0];

        std::vector<String> dateTime = data[3].split(':');
        std::vector<String> dateString = dateTime[0].split('/');
        
        
        String day = dateString[0].substr(1,2);
        date.setDay(day);
        
        String month = dateString[1];
        date.setMonth(month);

        String year = dateString[2];
        date.setYear(year);

        time.setHour(dateTime[1]);
        time.setMinute(dateTime[2]);
        time.setSecond(dateTime[3]);

        request = data[5] + data[6] + data[7];

        status = data[8];

        number_of_bytes = data[9].toInt();
    } else {
        host = String();
        date.setDay(String());
        date.setMonth(String());
        date.setYear(String());
        time.setHour(String());
        time.setMinute(String());
        time.setSecond(String());
        request = String(String());
        status = String(String());
        number_of_bytes = 0;
    }

}

// REQUIRES:
// ENSURES:
std::vector<LogEntry> parse(std::istream& in) {
    std::vector<LogEntry> result;
    char temp[200];

    while(in.getline(temp, 200)) {
        String line(temp);
        LogEntry log(line);
        result.push_back(log);
    }

    return result;
}

std::ostream& operator<<(std::ostream& out, const LogEntry& log) {
    out << "Host: " << log.host << std::endl;
        
    out << "Day: " << log.date.getDay() << std::endl;
    out << "Month: " << log.date.getMonth() << std::endl;
    out << "Year: " << log.date.getYear() << std::endl;
        
    out << "Hour: " << log.time.getHour() << std::endl;
    out << "Minute: " << log.time.getMinute() << std::endl;
    out << "Second: " << log.time.getSecond() << std::endl;
        
    out << "Request: " << log.request << std::endl;
    out << "Status: " << log.status << std::endl;
    out << "Bytes: " << log.number_of_bytes << std::endl << std::endl;

    return out;
}

// REQUIRES:
// ENSURES:
void output_all(std::ostream& out, const std::vector<LogEntry>& logsVector) {
    for(size_t i = 0; i < logsVector.size(); ++i) {
        out << logsVector[i];
    }
}

// REQUIRES:
// ENSURES:
void by_host(std::ostream& out, const std::vector<LogEntry>& logsVector) {   
    for(size_t i = 0; i < logsVector.size(); ++i) {
        out << logsVector[i].getHost() << std::endl;
    }
}

// REQUIRES:
// ENSURES:
int byte_count(const std::vector<LogEntry>& logsVector) {    
    int sum = 0;

    for(size_t i = 0; i < logsVector.size(); ++i) {
        sum += logsVector[i].getBytes();
    }

    return sum;
}

