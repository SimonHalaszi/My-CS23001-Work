#include "utilities.hpp"
#include <vector>

// Takes in an input file stream and converts its infix contents to postfix. Takes a string by reference to record orginal infix.
String infixToPostfix(std::ifstream& in, String& ogExpr) { 
    // Operands can be 6 characters in length + 1 for the null
    char token[7];
    String right;
    String left;
    String op;

    stack<String> stak;
    
    in >> token;

    // Returning string signifying end of the file
    if(in.eof()) {
        return "eof";
    }

    // If the line is empty returning empty string
    // I suppose this doesnt need to be checked for since its a invalid input but whatever
    if(token[0] == ';') {
        return '\0';
    }

    while( token[0] != ';' ) {
        ogExpr += String(token) + ' ';
       
        if( token[0] == ')' ) {
            right = stak.pop();
            op = stak.pop();
            left = stak.pop();
            stak.push(left + ' ' + right + ' ' + op);
        } else if ( token[0] != '(') {
            stak.push(token);
        }
        in >> token;
    }
    
    return stak.pop();
}

void toAssembly(const String& postExpr, std::ostream& out) {
    std::vector<String> tokenList = postExpr.split(' ');
    std::vector<String>::iterator t = tokenList.begin();

    String right;
    String left;
    String op;

    stack<String> stak;

    int count = 1;

    while(t != tokenList.end()) {
        if(!isOp(*t)) {
            stak.push(*t);
        } else {
            right = stak.pop();
            left = stak.pop();
            op = *t;
            stak.push(evaluate(left, op, right, count, out));
        }
        ++t;
    }
}

String evaluate(const String& left, const String& op, const String& right, int& count, std::ostream& out) {
    String result;
    result = "TMP" + intToString(count);

    out << "\tLD\t" << left << '\n';
    out << "\t" << whichOp(op) << '\t' << right << '\n';
    out << "\tST\t" << result << '\n';

    ++count;

    return result;
}

bool isOp(const String& checkToken) {
    if(checkToken == '+') {
        return true;
    }
    if(checkToken == '-') {
        return true;
    }
    if(checkToken == '*') {
        return true;
    }
    if(checkToken == '/') {
        return true;
    }
    return false;
}

String whichOp(const String& checkOp) {
    if(checkOp == '+') {
        return "AD";
    }
    if(checkOp == '-') {
        return "SB";
    }
    if(checkOp == '*') {
        return "MU";
    }
    if(checkOp == '/') {
        return "DV";
    }
    return "??";
}

String intToString(int num) {
    int temp = num;
    int numDigits = 0;
    while (temp != 0) {
        temp /= 10;
        numDigits++;
    }

    char* cArray = new char[numDigits + 1];

    int i = numDigits - 1;
    while (num != 0) {
        cArray[i] = (num % 10) + '0';
        num /= 10;
        i--;
    }
    cArray[numDigits] = '\0';

    String result(cArray);

    delete [] cArray;

    return result;
}