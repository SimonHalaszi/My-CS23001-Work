/*
* Simon Halaszi
* string project
* CS23001
*/

// Testing substrings

#include <iostream> 
#include <cassert>
#include "string.hpp"

//===========================================================================
int main () {
    std::cout << "----------------------------------------------------" << std::endl; 
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 1: " << std::endl;        
        
        String bigString = "Hello I am a big big string";
        
        std::cout << "Making substrings from string: " << '"' << bigString << '"' << std::endl;

        String subStringOne = bigString.substr(0 , 4);
        String subStringTwo = bigString.substr(13, 15);
        String subStringThree = bigString.substr(21, bigString.length() - 1);

        assert(subStringOne == "Hello");
        assert(subStringTwo == "big");
        assert(subStringThree == "string");

        std::cout << "Substring(0, 4): " << '"' << subStringOne << '"' << std::endl;
        std::cout << "Substring(13, 15): " << '"' << subStringTwo << '"' << std::endl;
        std::cout << "Substring(21, length() - 1): " << '"' << subStringThree << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 2: " << std::endl;        
        
        String string = 'A';
        
        std::cout << "Making substrings from string: " << '"' << string << '"' << std::endl;

        String subString = string.substr(0 , string.length());

        assert(subString == string);
        assert(subString == 'A');

        std::cout << "Substring(0, length()): " << '"' << subString << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 3: " << std::endl;        
        
        String string = "@!#$#%(*@#&!)";
        
        std::cout << "Making substrings from string: " << '"' << string << '"' << std::endl;

        String subString = string.substr(0 , string.length());

        assert(subString == string);
        assert(subString == "@!#$#%(*@#&!)");

        std::cout << "Substring(0, length()): " << '"' << subString << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 4 (SPECIAL CHARACTERS): " << std::endl;        
        
        String string = "@!#$#%(*@#&!)";
        
        std::cout << "Making substrings from string: " << '"' << string << '"' << std::endl;

        String subString = string.substr(0 , 6);

        assert(subString == "@!#$#%(");

        std::cout << "Substring(0, 6): " << '"' << subString << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 5: " << std::endl;        
        
        String string = "Hello! This is a sentence I suppose.";
        
        std::cout << "Making substrings from string: " << '"' << string << '"' << std::endl;

        String subString = string.substr(0 , 5);
        assert(subString == "Hello!");
        std::cout << "Substring(0, 5): " << '"' << subString << '"' << std::endl;

        subString = string.substr(7 , 10);
        assert(subString == "This");
        std::cout << "Substring(7, 10): " << '"' << subString << '"' << std::endl;

        subString = string.substr(string.length() - 8 , string.length());
        assert(subString == "suppose.");
        std::cout << "Substring(length() - 8 , length()): " << '"' << subString << '"' << std::endl;        
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 6: " << std::endl;        
        
        String string = "1 + 5 * 10 = 51";
        
        std::cout << "Making substrings from string: " << '"' << string << '"' << std::endl;

        String subString = string.substr(0 , 4);
        assert(subString == "1 + 5");
        std::cout << "Substring(0, 4): " << '"' << subString << '"' << std::endl;

        subString = string.substr(4 , 9);
        assert(subString == "5 * 10");
        std::cout << "Substring(7, 9): " << '"' << subString << '"' << std::endl;

        subString = string.substr(string.length() - 2 , string.length());
        assert(subString == "51");
        std::cout << "Substring(length() - 2 , length()): " << '"' << subString << '"' << std::endl;        
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 7: " << std::endl;        
        
        String string = "ThereIsNoSpacesToMakeThisNice";
        
        std::cout << "Making substrings from string: " << '"' << string << '"' << std::endl;

        String subString = string.substr(0 , 4);
        assert(subString == "There");
        std::cout << "Substring(0, 4): " << '"' << subString << '"' << std::endl;

        subString = string.substr(5 , 6);
        assert(subString == "Is");
        std::cout << "Substring(5, 8): " << '"' << subString << '"' << std::endl;

        subString = string.substr(7 , string.findch(7, 's'));
        assert(subString == "NoSpaces");
        std::cout << "Substring(7 , string.findch(7, 's')): " << '"' << subString << '"' << std::endl;

        subString = string.substr(string.length() - 4 , string.length());
        assert(subString == "Nice");
        std::cout << "Substring(length() - 4 , length()): " << '"' << subString << '"' << std::endl;        
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 8: " << std::endl;        
        
        String string = "Fun";
        
        std::cout << "Making substrings from string: " << '"' << string << '"' << std::endl;

        String subString = string.substr(0 , 2);
        assert(subString == "Fun");
        std::cout << "Substring(0, 2): " << '"' << subString << '"' << std::endl;
        
        subString = string.substr(0 , 1);
        assert(subString == "Fu");
        std::cout << "Substring(0, 2): " << '"' << subString << '"' << std::endl;

        subString = string.substr(0 , 0);
        assert(subString == "F");
        std::cout << "Substring(0, 1): " << '"' << subString << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 9 (EMPTY): " << std::endl;        
        
        String emptyString;
        
        std::cout << "Making substrings from string: " << '"' << emptyString << '"' << std::endl;

        String subString = emptyString.substr(0 , emptyString.length());

        assert(subString == String());

        std::cout << "Substring(0, length()): " << '"' << subString << '"' << std::endl;
    }  
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 10 (AT CAPACITY): " << std::endl;        
        
        String fullString = "Hello World, this is my very long String used for at-capacity testing. This String is two hundred and fifty-six characters long. That is including the null character at the end of the string. There isn't much else to say here about this string. I love CS!";
        std::cout << "Making substrings from string: " << '"' << fullString << '"' << std::endl;

        std::cout << fullString.length() << " == " << fullString.capacity() << std::endl;
        assert(fullString.length() == fullString.capacity());

        String subString = fullString.substr(0 , fullString.capacity());

        assert(subString.length() == subString.capacity());
        
        assert(subString == fullString);

        subString = fullString.substr(fullString.capacity() - 3, fullString.capacity());
        assert(subString == "CS!");
        std::cout << "Substring(capacity() - 3, capacity()): " << '"' << subString << '"' << std::endl;

        subString = fullString.substr(fullString.capacity() - 10, fullString.capacity());
        assert(subString == "I love CS!");
        std::cout << "Substring(capacity() - 10, capacity()): " << '"' << subString << '"' << std::endl;
    }          

    std::cout << std::endl << "Done testing substring." << std::endl;
    std::cout << "----------------------------------------------------" << std::endl; 

}