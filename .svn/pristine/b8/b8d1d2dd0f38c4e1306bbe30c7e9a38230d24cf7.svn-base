/*
* Simon Halaszi
* string project
* CS23001
*/

// Testing subscript overloading

#include <iostream> 
#include <cassert>
#include "string.hpp"

//===========================================================================
int main () {
    std::cout << "----------------------------------------------------" << std::endl; 
    {
        String alphabet = "-ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        std::cout << "Testing String: " << '"' << alphabet << '"' << std::endl;

        assert(alphabet[1] == 'A');
        assert(alphabet[2] == 'B');
        assert(alphabet[3] == 'C');
        assert(alphabet[24] == 'X');
        assert(alphabet[25] == 'Y');
        assert(alphabet[26] == 'Z');

        std::cout << "Subscript returning correct indexes" << std::endl;

        alphabet[24] = 'A';
        alphabet[25] = 'B';
        alphabet[26] = 'C';
        alphabet[1] = 'X';
        alphabet[2] = 'Y';
        alphabet[3] = 'Z';

        std::cout << "Modifier subscript changed characters" << std::endl;
        std::cout << "New String: " << '"' << alphabet << '"' << std::endl;

        assert(alphabet[24] == 'A');
        assert(alphabet[25] == 'B');
        assert(alphabet[26] == 'C');
        assert(alphabet[1] == 'X');
        assert(alphabet[2] == 'Y');
        assert(alphabet[3] == 'Z');

        std::cout << "Subscript returning correct indexes" << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 2: " << std::endl;

        // Test 
        String string = 'A';
        std::cout << "Checking indexes of: " << '"' << string << '"' << std::endl;

        // Verify
        assert(string[0] == 'A');
        assert(string[1] == '\0');
        std::cout << "Indexes are correct'" << std::endl;

        string[0] = 'B';

        std::cout << "Changed string using subscript: " << '"' << string << '"' << std::endl;

        assert(string[0] == 'B');
        assert(string[1] == '\0');
        std::cout << "New indexes are correct'" << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 3: " << std::endl;

        // Test 
        String string = "ABCD";
        std::cout << "Checking indexes of: " << '"' << string << '"' << std::endl;

        // Verify
        assert(string[0] == 'A');
        assert(string[1] == 'B');
        assert(string[2] == 'C');
        assert(string[3] == 'D');
        assert(string[4] == '\0');     
        std::cout << "Indexes are correct'" << std::endl;

        string[0] = 'D';
        string[1] = 'C';
        string[2] = 'B';
        string[3] = 'A';        

        std::cout << "Changed string using subscript: " << '"' << string << '"' << std::endl;

        assert(string[0] == 'D');
        assert(string[1] == 'C');
        assert(string[2] == 'B');
        assert(string[3] == 'A');
        assert(string[4] == '\0');  
        std::cout << "New indexes are correct'" << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 4: " << std::endl;

        // Test 
        String string = "Turn this string to A's";
        std::cout << "Changing indexes of: " << '"' << string << '"' << std::endl;

        for(int i = 0; i < string.length(); ++i)
            string[i] = 'A';

        // Verify
        assert(string == "AAAAAAAAAAAAAAAAAAAAAAA");
        std::cout << "Changed String: " << '"' << string << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 5: " << std::endl;

        // Test 
        String string = "Count up!";
        std::cout << "Changing indexes of: " << '"' << string << '"' << std::endl;

        for(int i = 0; i < string.length(); ++i)
            string[i] = '0' + (i + 1);

        // Verify
        assert(string == "123456789");
        std::cout << "Changed String: " << '"' << string << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 6 (SPECIAL CHARACTERS): " << std::endl;

        // Test 
        String string = "Do some weird stuff with this string.";
        std::cout << "Changing indexes of: " << '"' << string << '"' << std::endl;

        for(int i = 0; i < string.length(); ++i)
            string[i] = '#' + i;

        // Verify
        assert(string == "#$%&'()*+,-./0123456789:;<=>?@ABCDEFG");
        std::cout << "Changed String: " << '"' << string << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 7: " << std::endl;

        // Test 
        String string = "Today is Sunday!";
        std::cout << "Changing indexes of: " << '"' << string << '"' << std::endl;

        string[9] = 'M';
        string[10] = 'o';

        // Verify
        assert(string == "Today is Monday!");
        std::cout << "Changed String: " << '"' << string << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 8: " << std::endl;

        // Test 
        String string = "EncodeThisString";
        std::cout << "Changing indexes of: " << '"' << string << '"' << std::endl;

        for(int i = 0; i < string.length(); ++i)
            string[i] = string[i] - 1;

        // Verify
        assert(string == "DmbncdSghrRsqhmf");
        std::cout << "Changed String: " << '"' << string << '"' << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 9 (EMPTY): " << std::endl;

        // Test 
        String stringOne;
        std::cout << "Checking some indexes of: " << '"' << stringOne << '"' << std::endl;

        // Verify
        assert(stringOne[0] == '\0');
        std::cout << "First index of empty string is a null character" << std::endl;

        // ASSERTION WONT LET YOU DO THIS. CANT MODIFY OR READ VALUES THAT ARNT IN THE STRING
        // stringOne[1] = 'T';
        // std::cout << stringOne[1] << std::endl;
    }
    {
        //------------------------------------------------------
        // Setup fixture
        std::cout << "-     Test 10 (AT CAPACITY): " << std::endl;

        // Test 
        String stringOne = "Hello World, this is my very long String used for at-capacity testing. This String is two hundred and fifty-six characters long. That is including the null character at the end of the string. There isn't much else to say here about this string. I love CS!";
        std::cout << "Checking some indexes of: " << '"' << stringOne << '"' << std::endl;

        assert(stringOne.length() == stringOne.capacity());

        // Verify
        assert(stringOne[0] == 'H');
        assert(stringOne[stringOne.capacity() - 1] == '!');
        assert(stringOne[stringOne.capacity()] == '\0');

        std::cout << "Subscript went off of capacity correctly." << std::endl;
    }

    std::cout << std::endl << "Done testing subscript." << std::endl;
    std::cout << "----------------------------------------------------" << std::endl;    
}