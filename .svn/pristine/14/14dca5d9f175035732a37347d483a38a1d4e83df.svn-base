#include "string.hpp"
#include <cassert>

//Empty string
String::String() {
    stringSize = 1;
    str = new char[stringSize];
    str[0] = '\0';
}                              

//String('x')
String::String(char ch) {
    if(ch == '\0') {
        stringSize = 1;
        str = new char[stringSize];
        str[0] = '\0';
    }
    else {
        stringSize = 2;
        str = new char[stringSize];
        str[0] = ch;
        str[1] = '\0';
    }
}

//String("abc")
String::String(const char cString[]) {
    int size = 0;
    
    while(cString[size] != '\0') {
        ++size;
    }

    stringSize = size + 1;
    str = new char[stringSize];

    int i = 0;
    while(i < stringSize) {
        str[i] = cString[i];
        ++i;
    }
}

//Copy Constructor
String::String(const String& copy) {
    stringSize = copy.stringSize;
    str = new char[stringSize];  
    
    // This is here because Clang WAS GETTING VERY NOSY ABOUT SIZE NOT BEING INTIALIZED PROPERLY
    // EVEN THOUGH THAT IS IMPOSSIBLE. STRINGSIZE WILL NEVER BE LESS THAN 1 SO THIS LOOP CONDITION
    // WILL ALWAYS BE ATLEAST TRUE ONCE!!!!! BUT CLANG WAS LIKE NOOOOOOOOOOOOOO >:(
    assert(stringSize > 0);
    
    for(int i = 0; i < stringSize; ++i)
        str[i] = copy.str[i];        
}

//Destructor
String::~String() {
    delete [] str;
}

//Constant time swap
void String::swap(String& other) {
    int tempSize = stringSize;
    stringSize = other.stringSize;
    other.stringSize = tempSize;

    char* tempStr = str;
    str = other.str;
    other.str = tempStr;
}

//Assignment Copy
String& String::operator=(String rhs) {
    swap(rhs);
    return *this;
}

//Max chars that can be stored
int String::capacity() const {
    return stringSize - 1;
}

//Actual number of chars in string
int String::length() const {
    int len = 0;
    while(str[len] != '\0') {
        ++len;
    }
    return len;
}

//Accessor/Modifier
char& String::operator[](int index) {
    return str[index];
}

//Accessor
char String::operator[](int index) const {
    return str[index];
}

String& String::operator+=(const String& rhs) {
    // These are just saving computation resources for empty strings
    if(rhs == '\0')
        return *this;
    else if(*this == '\0') {
        *this = rhs;
        return *this;
    }
    else {
        int rhsLen = rhs.length();
        int len = length();

        String temp = *this;

        stringSize += rhsLen;

        delete [] str;
        str = new char[stringSize];

        int i = 0;
        while(i < len) {
            str[i] = temp.str[i];
            ++i;
        }
        
        while(i - len < rhsLen) {
            str[i] = rhs.str[i - len];
            ++i;
        }

        str[i] = '\0';
        return *this;
    }
}

bool String::operator==(const String& rhs) const {
    int i = 0;
    
    while(str[i] == rhs.str[i] && str[i] != '\0' && rhs.str[i] != '\0') {
        ++i;
    }
    
    return (str[i] == rhs.str[i]);
}

bool String::operator<(const String& rhs) const {
    int i = 0;
    
    while(str[i] == rhs.str[i] && str[i] != '\0' && rhs.str[i] != '\0') {
        ++i;
    }
    
    return (str[i] < rhs.str[i]);
}

//sub from staring to ending position
String String::substr(int start, int end) const {
    String subString;

    subString.stringSize = end - start + 1;

    delete [] subString.str;
    subString.str = new char[stringSize];
    
    int i = start;

    while(i <= end && i < capacity()) {
        subString[i - start] = str[i];
        ++i;
    }

    subString[i - start] = '\0';

    return subString;
}

//Location of charater starting at position
int String::findch(int start, char findMe) const {
    int i = start;
    int len = length();

    while(i <= len) {
        if(str[i] == findMe)
            return i;
        ++i;
    }
    return -1;
}

//Location of string starting at a position
int String::findstr(int start, const String& findMe) const {
    int startI = start;
    int endI = findMe.length() - 1;
    int len = length();
    
    while(startI + endI <= len) {
        if(substr(startI, endI + startI) == findMe) {
            return startI;
        }
        ++startI;
    }
    return -1;
}

std::ostream& operator<<(std::ostream& out, const String& rhs) {
    int i = 0;
    int len = rhs.length();
    
    while(i < len) {
        out << rhs.str[i];
        ++i;
    }
    
    return out;
}

std::istream& operator>>(std::istream& in, String& rhs) {
    char takeIn[2048];

    in >> takeIn;

    rhs = takeIn;

    return in;
}

String operator+(String lhs, const String& rhs) {
    return lhs += rhs;
}

bool operator==(const char lhs[], const String& rhs) {
    return String(lhs) == rhs;
}

bool operator==(char lhs, const String& rhs) {
    return String(lhs) == rhs;
}

bool operator<(const char lhs[], const String& rhs) {
    return String(lhs) < rhs;
}

bool operator<(char lhs, const String& rhs) {
    return String(lhs) < rhs;
}

bool operator<=(const String& lhs, const String& rhs) {
    return (lhs == rhs || lhs < rhs);
}

bool operator!=(const String& lhs, const String& rhs) {
    return !(lhs == rhs);
}

bool operator>=(const String& lhs, const String& rhs) {
    return (lhs == rhs || lhs > rhs);
}

bool operator>(const String& lhs, const String& rhs) {
    return rhs < lhs;
}