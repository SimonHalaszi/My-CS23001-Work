#include "utilities.hpp"

// Takes in an input file stream and converts its infix contents to postfix
String infixToPostfix(std::ifstream& file) { 
    // Operands can be 6 characters in length + 1 for the null
    char token[7];
    String right;
    String left;
    String op;

    stack<String> stak;
    
    file >> token;

    // Returning string signifying end of the file
    if(file.eof()) {
        return "eof";
    }

    // If the line is empty returning empty string
    // I suppose this doesnt need to be checked for since its a invalid input but whatever
    if(token[0] == ';') {
        return '\0';
    }

    std::cout << "Infix Expression: ";

    while( token[0] != ';' ) {
        std::cout << token << " ";
        
        if( token[0] == ')' ) {
            right = stak.pop();
            op = stak.pop();
            left = stak.pop();
            stak.push(left + ' ' + right + ' ' + op);
        } else if ( token[0] != '(') {
            stak.push(token);
        }
        file >> token;
    }

    std::cout << std::endl;
    
    return stak.pop();
}